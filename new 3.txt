<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
	<link rel="icon" href="points.png">
    <title>Wonder Words</title>
    <style>
        @font-face {
          font-family: pixel;
          src: url(pixel.ttf);
        }
		
        body {
            font-family: pixel;
            background-image: url('background.png');
			background-position: center;
			background-size: cover;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            height: 100vh;
            margin: 0;
			overflow: hidden;
			font-weight: bolder;
			font-size: 20px;
			background-repeat: no-repeat;
        }
		
        button {
            font-family: pixel;
            margin: 5px;
            padding: 10px;
            font-size: 20px;
			font-weight: bolder;
        }
		
		#main {
			margin: auto;
		}
			
        #panel {
            font-size: 18px;
            margin-top: 5%;
			float: left;
            width: 400px;
            height: 650px;
            margin-left: 300px;
            border-color: brown;
            border-style: solid;
            border-width: 12px;
            display: flex;
            flex-direction: column;
            background-image: linear-gradient(to bottom right, bisque, burlywood);
			padding: 25px;
        }
		
		#exit {
			width: 10px;
		}
		
		#pointsPanel {
			margin-top: 25px;
			margin-left: 25px;
			display: flex;
			align-items: center;
		}

		#points {
			font-family: pixel;
			margin-left: 20px;
			font-size: 20px;
		}
		
		#strikesPanel {
			margin-top: 25px;
			display: flex;
			align-items: center;
		}

		#strikes {
			margin-left: 25px;
			font-size: 20px;
		}
		
		#strikesIcon {
			margin-left: 25px;
			font-size: 20px;
		}
		
		#clues {
			margin-top: 30px;
			margin-left: 25px;
			font-size: 20px;
		}
		
		#category {
			margin-top: 25px;
			margin-left: 25px;
			font-size: 20px;
		}
		
		#questions {
			margin-top: 25px;
			margin-left: 25px;
			font-size: 20px;
		}
		
		#clueButton {
			margin-top: 50px;
			height: 65px;
			font-family: pixel;
            color: bisque;
            text-shadow: 5px 5px black;
            font-size: 25px;
            background-color: brown;
            border-color: brown;
            border-width: 8px;
		}
		
		#playMusic {
			height: 65px;
			font-family: pixel;
            color: bisque;
            text-shadow: 5px 5px black;
            font-size: 25px;
            background-color: brown;
            border-color: brown;
            border-width: 8px;
		}
		
		#game {
			display: flex;
			flex-direction: column;
			
		}
		
        #word-display {
            float: left;
            width: 750px;
            height: 250px;
            margin-left: 75px;
			margin-top: 8.5%;
            display: flex;
            flex-direction: column;
            justify-content: center;
			border-color: brown;
            border-style: solid;
            border-width: 12px;
            align-items: center;
			background-image: linear-gradient(to bottom right, bisque, burlywood);
        }
		
        #keyboard {
			float: left;
			width: 750px;
			height: 375px;
			margin-top: 4.2%;
			margin-left: 75px;
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			border-color: brown;
			border-style: solid;
			border-width: 12px;
			align-items: center;
			background-image: linear-gradient(to bottom right, bisque, burlywood);
			font-size: 20px;
		}
		
		#keyboard button {
			font-family: pixel;
			font-size: 24px;
			width: 60px; /* Adjust the button width */
			height: 60px; /* Adjust the button height */
			background-color: brown;
            border-color: brown;
            border-width: 8px;
			color: bisque;
			text-shadow: 3px 3px black;
		}
		
		#keyboard button:disabled, #keyboard button.correct-guess {
			background-color: gray;
			border-color: gray;
			color: gainsboro;
			text-shadow: none;
		}
		
        #custom-alert-box {
			position: fixed;
			display: none;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			padding: 20px;
			background-image: linear-gradient(to bottom right, bisque, burlywood);
			border: 8px solid brown;
			z-index: 9999;
			width: 600px;
			text-align: center;
        }
		
		#custom-button {
			margin-top: 50px;
			height: 65px;
			font-family: pixel;
            color: bisque;
            text-shadow: 5px 5px black;
            font-size: 25px;
            background-color: brown;
            border-color: brown;
            border-width: 8px;
		}

        #custom-alert-content {
			margin-top: 2px;
        }
		
		#reset-alert-box {
			position: fixed;
			display: none;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			padding: 20px;
			background-image: linear-gradient(to bottom right, bisque, burlywood);
			border: 8px solid brown;
			z-index: 9999;
			width: 600px;
			text-align: center;
        }
		
		#reset-button {
			margin-top: 50px;
			height: 65px;
			font-family: pixel;
            color: bisque;
            text-shadow: 5px 5px black;
            font-size: 25px;
            background-color: brown;
            border-color: brown;
            border-width: 8px;
		}

        #reset-alert-content {
			margin-top: 2px;
        }

        button:disabled,button[disabled] {
            font-family: pixel;
			font-size: 16px;
			width: 60px; /* Adjust the button width */
			height: 60px; /* Adjust the button height */
			background-color: brown;
            border-color: brown;
            border-width: 8px;
			color: gray;
			text-shadow: 3px 3px black;
            cursor: not-allowed; /* Change the cursor to indicate the button is disabled */
        }
		
		.clueSelect {
			padding: 25px;
			text-align: center;
		}
		
		.overlay {
			position: fixed;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background: rgba(0, 0, 0, 0.5);
			z-index: 9999; /* Change z-index to be higher than the other elements */
			display: none;
		}
		
		.popup {
			position: fixed;
			left: 50%;
			top: 50%;
			transform: translate(-50%, -50%);
			width: 600px;
			background: rgba(0, 0, 0, 0.6);
			z-index: 10000; /* Change z-index to be higher than the overlay */
			display: none;
		}
		
		.popup-content {
			background-image: linear-gradient(to bottom right, bisque, burlywood);
			font-size: 20px;
			margin: auto;
			padding: 25px;
			border: 8px solid brown;
			box-sizing: border-box; /* Include padding and border in the element's total width and height */
			max-height: 80vh; /* Set a maximum height based on the viewport height */
			overflow-y: auto; /* Enable vertical scrolling if content exceeds the maximum height */
		}

        .popup-content button {
            display: inline-block;
            margin: 0 auto;
			border-color: brown;
            border-width: 6px;
			background-color: brown;
			color: bisque;
			text-shadow: 3px 3px black;
        }
		
		.cluePopupButton {
			font-family: pixel;
			margin: 5px;
			padding: 10px;
			font-size: 25px;
			height: 50px;
			width: calc(33.33% - 8px); /* Adjust the width for three buttons with a small gap */
			height: 65px;
			box-sizing: border-box;
		}
			
        .show {
            display: block;
        }
		
		footer {
			position: fixed;
			bottom: 0;
			left: 0;
			width: 100%;
			background-color: bisque; /* Set the background color for the footer */
			text-align: center;
			padding: 10px;
			font-family: pixel;
			font-size: 16px;
		}
    </style>
</head>
<footer>Mendoza | Ranola | Sibucao | Marcos | De Francia</footer>
<body>

<div id="main">
	<div id="panel">
		<a id="exit" href="index.html"><img src="exit.png" title="Go Back"></a>
		<div id="pointsPanel">
			<div id="pointsIcon"><img src="points.png" title="Points"></div>
			<div id="points"></div>
		</div>
		<div id="strikesPanel">
			<div id="strikes">Lives:</div>
			<div id="strikesIcon" title="Lives"></div>
		</div>
		<div id="clues"></div>
		<div id="category"></div>
		<div id="questions"></div>
		<button id="clueButton" onclick="playButtonPressSound(), showCluePopup()">Use Clue</button>
		<div class="popup" id="cluePopup">
			<div class="popup-content">
				<p class="clueSelect">Please select a type of clue.</p>
				<button class="cluePopupButton" onclick="useClue('consonant'), playButtonPressSound(), closeCluePopup()">Consonant</button>
				<button class="cluePopupButton" onclick="useClue('vowel'), playButtonPressSound(), closeCluePopup()">Vowel</button>
				<button class="cluePopupButton" onclick="playButtonPressSound(), closeCluePopup()">Cancel</button>
			</div>
		</div>
		<button id="playMusic"><b>Toggle Music</b></button>
		<button id="reset-button" onclick="showResetConfirmationPopup()"><b>Reset Game</b></button>
	</div>
</div>

<div class="overlay" id="overlay"></div>

<div id="game">
	<div id="word-display"></div>
	<div id="keyboard"></div>
</div>

<div id="custom-alert-box">
    <div id="custom-alert-content"></div>
    <button id="custom-button" onclick="playButtonPressSound(), removeCustomAlert()">OK</button>
</div>

<div id="reset-alert-box">
    <div id="reset-alert-content">Are you sure you want to reset the game? You will lose all your current progress.</div>
    <button id="reset-button" onclick="resetGame(), hideResetConfirmationPopup()">Yes</button>
    <button id="reset-button" onclick="hideResetConfirmationPopup()">Cancel</button>
</div>

<audio id="buttonPress" src="buttonPress.mp3"></audio>
<audio id="backgroundMusic" src="gameBackground.mp3" autoplay loop></audio>
<audio id="deathSound" src="death.mp3"></audio>
<audio id="wrongLetterSound" src="damage.mp3"></audio>
<audio id="correctLetterSound" src="correctLetter.mp3"></audio>
<audio id="completeWordSound" src="completeWord.mp3"></audio>
<audio id="completeRoundSound" src="completeRound.mp3"></audio>
<audio id="giveClueSound" src="giveClue.mp3"></audio>
<audio id="goBackSound" src="goBack.mp3"></audio>

<script>
    let totalPoints = 100;
    let incorrectGuesses = 0;
    let currentRound = 0;
    let currentWord = "";
    let currentWordObject = {};
    let currentQuestion = "";
    let guessedLetters = [];
    let clues = 3;
    let lettersRevealedByClues = [];
	
	function showCluePopup() {
        // Add the "show" class to the overlay element
        document.getElementById('overlay').classList.add('show');
        document.getElementById('cluePopup').classList.add('show');
    }

    function closeCluePopup() {
		// Remove the "show" class from both the overlay and cluePopup elements
		document.getElementById('overlay').classList.remove('show');
		document.getElementById('cluePopup').classList.remove('show');
	}

    function showCustomAlert(message, callback) {
        document.getElementById('custom-alert-content').innerText = message;
        document.getElementById('custom-alert-box').style.display = 'block';
        document.getElementById('custom-alert-box').dataset.callback = String(callback);
		document.getElementById('overlay').style.display = 'block';
    }

    function removeCustomAlert() {
        var callbackString = document.getElementById('custom-alert-box').dataset.callback;
        document.getElementById('custom-alert-box').style.display = 'none';
		document.getElementById('overlay').style.display = 'none';
        if (callbackString) {
            var callback = eval('(' + callbackString + ')');
            if (typeof callback === 'function') {
                callback();
            }
        }
    }
	
	function showResetConfirmationPopup() {
		document.getElementById('reset-alert-box').style.display = 'block';
		document.getElementById('overlay').style.display = 'block';
		playButtonPressSound();
	}

	function hideResetConfirmationPopup() {
		document.getElementById('reset-alert-box').style.display = 'none';
		document.getElementById('overlay').style.display = 'none';
		playButtonPressSound();
	}

    function createKeyboard() {
        let keyboardDiv = document.getElementById("keyboard");
        keyboardDiv.innerHTML = "";

        const keyboardLayout = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ"];

        for (let row of keyboardLayout) {
            for (let letter of row) {
                let button = document.createElement("button");
                button.textContent = letter;
                button.setAttribute('data-letter', letter); // Add data-letter attribute
                if (lettersRevealedByClues.includes(letter)) {
                button.disabled = true;
            }

                button.addEventListener("click", () => handleGuess(letter, button)); // Pass the button to handleGuess
                keyboardDiv.appendChild(button);
            }
        }
    }

    function resetKeyboard() {
        guessedLetters = [];
        lettersRevealedByClues = [];

        let keyboardDiv = document.getElementById("keyboard");
        keyboardDiv.innerHTML = "";

        createKeyboard();
    }
	
	function createHearts() {
		let strikesIconDiv = document.getElementById("strikesIcon");
		let image = document.createElement("img");
		image.src = "hearts-3.png";
		strikesIconDiv.appendChild(image);
		document.getElementById("strikesPanel").appendChild(strikesIconDiv);
	}
	
	function resetStrikesIcon() {
		let strikesIconDiv = document.getElementById("strikesIcon");
		strikesIconDiv.innerHTML = ""; // Remove existing image

		// Create and append the original image
		let image = document.createElement("img");
		image.src = "hearts-3.png";
		strikesIconDiv.appendChild(image);
	}
	
    function useClue(clueCategory) {
        const clueCost = 25;
        let clueButtons = document.getElementsByClassName("clueButton");

        if (clues <= 0) {
            showCustomAlert("You have no more clues left!");
            for (let i = 0; i < clueButtons.length; i++) {
                clueButtons[i].disabled = true;
            }
            return;
        }

        if (totalPoints >= clueCost) {

            let possibleClues = getPossibleClues(clueCategory);
            let randomClue = getRandomClue(possibleClues);

            if (randomClue) {
                guessedLetters.push(randomClue);
                lettersRevealedByClues.push(randomClue);
                totalPoints -= clueCost;
                clues--;
                showCustomAlert(`Clue used! The letter is: ${randomClue}`);
                updateDisplay();
                updateScoreboard();
                createKeyboard();

                if (new Set(currentWord.split("")).size === guessedLetters.length) {
                    showCustomAlert(`Congratulations! You guessed the word: ${currentWord}`, startRound);
                    totalPoints += 10;
					playCompleteWordSound();
                    resetKeyboard();
                    }
            }
        } else {
            showCustomAlert("Not enough points to avail a clue!");
        }
    }

    function getPossibleClues(clueCategory) {
        let possibleClues = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("").filter(letter => !guessedLetters.includes(letter));

        if (clueCategory === "vowel") {
            possibleClues = possibleClues.filter(letter => "AEIOU".includes(letter) && currentWord.includes(letter));
            if (possibleClues.length === 0) {
            showCustomAlert('There are no more vowels in the word!');
            }
        } else {
            possibleClues = possibleClues.filter(letter => !"AEIOU".includes(letter) && currentWord.includes(letter));
            if (possibleClues.length === 0) {
            showCustomAlert('There are no more consonant in the word!');
            }
        }

        return possibleClues;
    }

    function getRandomClue(possibleClues) {
        return possibleClues.length > 0 ? possibleClues[Math.floor(Math.random() * possibleClues.length)] : null;
    }

    let easyWords = [
        { word: "APPLE", question: "A fruit often associated with teachers." },
        { word: "BANANA", question: "A yellow fruit with a peel." },
        { word: "ORANGE", question: "A citrus fruit with a tough outer layer." },
        { word: "APOLLO", question: "Who was the ancient greek god of sun." },
        { word: "HANGAROO", question: "A word-guessing game with a kangaroo theme." },
        { word: "GIRAFFE", question: "A long-necked mammal found in Africa." },
        { word: "ELEPHANT", question: "A large land mammal known for its tusks." },
        { word: "C", question: "Programmer's favorite note." },
        { word: "COFFEE", question: "A popular caffeinated beverage." },
        { word: "ZEUS", question: "Who was the ancient greek god of lightning." }
    ];

    let moderateWords = [
        { word: "PROGRAMMING", question: "The process of writing code for software development." },
        { word: "ALGORITHM", question: "A set of instructions or rules for solving a problem." },
        { word: "DATABASE", question: "A structured collection of data." },
        { word: "NETWORK", question: "A system of interconnected computers or devices." },
        { word: "JAVASCRIPT", question: "A scripting language used for web development." },
        { word: "PYTHON", question: "A versatile programming language." },
        { word: "JAVA", question: "A popular object-oriented programming language." },
        { word: "HTML", question: "A markup language for creating web pages." },
        { word: "CSS", question: "A style sheet language for designing web pages." },
        { word: "CLOUD", question: "A network of remote servers for storing and managing data." }
    ];

    let difficultWords = [
        { word: "CYBERSECURITY", question: "The practice of protecting computer systems and networks from digital attacks." },
        { word: "BLOCKCHAIN", question: "A decentralized and distributed ledger technology." },
        { word: "MACHINELEARNING", question: "A subset of artificial intelligence that enables machines to learn from data." },
        { word: "ARTIFICIALINTELLIGENCE", question: "The simulation of human intelligence in machines." },
        { word: "WEBDEVELOPMENT", question: "The process of building and maintaining websites." },
        { word: "DATASCIENCE", question: "The extraction of knowledge and insights from structured and unstructured data." },
        { word: "FRONTEND", question: "The part of a website that users interact with directly." },
        { word: "BACKEND", question: "The server-side of a website, responsible for processing requests." },
        { word: "VIRTUALIZATION", question: "The creation of a virtual version of a resource, such as an operating system or server." },
        { word: "DOCKER", question: "A platform for developing, shipping, and running applications in containers." }
    ];

    let categories = ["Easy", "Moderate", "Difficult"];
    let words = [easyWords, moderateWords, difficultWords];

    function startRound() {
        if (currentRound < categories.length - 1) {
            currentWordObject = getRandomWord();
            currentWord = currentWordObject.word;
            currentQuestion = currentWordObject.question;
            resetKeyboard();

            updateDisplay();
            updateScoreboard();
        } else {
            showCustomAlert(`Congratulations! You completed all categories./nPoints: ${totalPoints}`);
            resetGame();
        }
    }

    function getRandomWord() {
        let categoryIndex = currentRound;
        let availableQuestions = words[categoryIndex].filter(wordObj => !wordObj.used);

        if (availableQuestions.length > 0) {
            let randomIndex = Math.floor(Math.random() * availableQuestions.length);
            let selectedWordObject = availableQuestions[randomIndex];
            selectedWordObject.used = true;
            return selectedWordObject;
        } else {
            showCustomAlert(`Congratulations! You have finished the ${categories[currentRound]} round! Moving onto the next round.`);
            playCompleteRoundSound();
            currentRound++;
            return getRandomWord();
        }
    }

    function resetQuestionsUsage() {
        for (let category of words) {
            for (let wordObj of category) {
                wordObj.used = false;
            }
        }
    }

    function updateDisplay() {
		let display = `${currentQuestion}\n\n`;

		for (let letter of currentWord) {
			if (!isLetter(letter)) {
				display += letter + " ";
			} else if (guessedLetters.includes(letter)) {
				display += letter + " ";
			} else {
				display += "_ ";
			}
		}

		document.getElementById("word-display").innerHTML = display.trim();
	}

    function updateScoreboard() {
		let answeredQuestions = words[currentRound].filter(wordObj => wordObj.used).length;
		document.getElementById("points").textContent = `${totalPoints}`;
		document.getElementById("clues").textContent = `Clues: ${clues}`;
		document.getElementById("category").textContent = `Category: ${categories[currentRound]}`;
		document.getElementById("questions").textContent = `Question: ${answeredQuestions}/${words[currentRound].length}`;
	}

    function handleGuess(letter, buttonElement) {
        let occurrences = getAllOccurrences(currentWord, letter);

        if (occurrences.length > 0) {
            occurrences.forEach(position => {
                if (!guessedLetters.includes(letter) && currentWord[position] === letter) {
                    guessedLetters.push(letter);
                    playCorrectLetterSound();

                    if (guessedLetters.length === new Set(currentWord.split("")).size) {
                        playCompleteWordSound();
                        showCustomAlert(`Congratulations! You guessed the word: ${currentWord}`, startRound);
                        totalPoints += 10;
                    }

                    updateDisplay();
                    updateScoreboard();
                    buttonElement.disabled = true; // Disable the button
                    buttonElement.classList.add('correct-guess'); // Add a class for correct guess
                }
            });
        } else {
            incorrectGuesses++;
            buttonElement.disabled = true; // Disable the button
            buttonElement.classList.add('wrong-guess'); // Add a class for wrong guess
            playWrongLetterSound();
			
			let strikesIconDiv = document.getElementById("strikesIcon");
			let existingImage = strikesIconDiv.querySelector("img");
			
			if (incorrectGuesses === 1) {
				existingImage.src = "hearts-2.png";
			} else if (incorrectGuesses === 2) {
				existingImage.src = "hearts-1.png";
			} else if (incorrectGuesses === 3) {
				existingImage.src = "hearts-0.png";
			}

            if (incorrectGuesses === 3) {
                playDeathSound();
                showCustomAlert(`Game over. You reached the maximum incorrect guesses.\nPoints: ${totalPoints}`);
                resetGame();
            } else {
                updateScoreboard();
            }
        }
    }


    function getAllOccurrences(word, letter) {
        let occurrences = [];
        for (let i = 0; i < word.length; i++) {
            if (word[i] === letter) {
                occurrences.push(i);
            }
        }
        return occurrences;
    }

    function isLetter(char) {
        return /^[a-zA-Z]$/.test(char);
    }

    function resetGame() {
        totalPoints = 0;
        currentRound = 0;
        incorrectGuesses = 0;
        clues = 3;
        resetQuestionsUsage();
        startRound();
        resetKeyboard();
		resetStrikesIcon();
        let clueButtons = document.getElementsByClassName("clueButton");
        for (let i = 0; i < clueButtons.length; i++) {
            clueButtons[i].disabled = false;
        }
    }

    function initGame() {
		resetQuestionsUsage();
		startRound();
		createKeyboard();
		createHearts();
	}
	
	function disableBackgroundButtons(disable) {
        let backgroundButtons = document.querySelectorAll('#keyboard button, #clueButton, #playMusic');
        backgroundButtons.forEach(button => {
            button.disabled = disable;
        });
    }
	
	function playButtonPressSound() {
		let audio = document.getElementById("buttonPress");
			
		audio.currentTime = 0;
		audio.volume = 0.5;
		
		if (audio) {
			audio.play();
		}
	}

    function playWrongLetterSound() {
        let audio = document.getElementById("wrongLetterSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }

    function playCorrectLetterSound() {
        let audio = document.getElementById("correctLetterSound");
		
		audio.currentTime = 0;
        audio.volume = 0.2;

        if (audio) {
            audio.play();
        }
    }

    function playCompleteWordSound() {
        let audio = document.getElementById("completeWordSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }

    function playCompleteRoundSound() {
        let audio = document.getElementById("completeRoundSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }

    function playGiveClueSound() {
        let audio = document.getElementById("giveClueSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }

    function playGoBackSound() {
        let audio = document.getElementById("goBackSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }

    function playDeathSound() {
        let audio = document.getElementById("deathSound");

        audio.currentTime = 0;
		audio.volume = 0.5;

        if (audio) {
            audio.play();
        }
    }
	
	playMusic.addEventListener("click", function () {
			toggleBackgroundMusic();
			playButtonPressSound();
		});

		function toggleBackgroundMusic() {
			let backgroundMusic = document.getElementById("backgroundMusic");

			if (backgroundMusic.paused) {
				backgroundMusic.play();
			} else {
				backgroundMusic.pause();
			}
		}

		function playBackgroundMusic() {
			let backgroundMusic = document.getElementById("backgroundMusic");

			audio.currentTime = 0;
			backgroundMusic.volume = 0.5;

			if (backgroundMusic) {
				backgroundMusic.play();
			}
		}

    initGame();
</script>
</body>
</html>